!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BACKLOG	src/net.c	11;"	d	file:
CC	src/Makefile	/^CC=gcc$/;"	m
CFLAGS	src/Makefile	/^CFLAGS=-Wall -Wextra -g$/;"	m
DEFAULT_GROW_FACTOR	src/hashtable.c	45;"	d	file:
DEFAULT_MIME_TYPE	src/mime.c	5;"	d	file:
DEFAULT_SIZE	src/hashtable.c	44;"	d	file:
MAXLINE	src/server.c	37;"	d	file:
NDEBUG	src/cache_tests/minunit.h	1;"	d
OBJS	src/Makefile	/^OBJS=server.o net.o file.o mime.o cache.o hashtable.o llist.o$/;"	m
PORT	src/server.c	39;"	d	file:
RUN_TESTS	src/cache_tests/minunit.h	17;"	d
SERVER_FILES	src/server.c	41;"	d	file:
SERVER_ROOT	src/server.c	42;"	d	file:
TESTS	src/Makefile	/^TESTS=$(patsubst %.c,%,$(TEST_SRC))$/;"	m
TEST_SRC	src/Makefile	/^TEST_SRC=$(wildcard cache_tests\/*_tests.c)$/;"	m
_FILELS_H_	src/file.h	2;"	d
_HASHTABLE_H_	src/hashtable.h	2;"	d
_LLIST_H_	src/llist.h	2;"	d
_MIME_H_	src/mime.h	2;"	d
_NET_H_	src/net.h	2;"	d
_UTILS_H_	src/cache_tests/utils.h	2;"	d
_WEBCACHE_H_	src/cache.h	2;"	d
__dbg_h__	src/cache_tests/dbg.h	2;"	d
_minuit_h_	src/cache_tests/minunit.h	3;"	d
add_entry_count	src/hashtable.c	/^void add_entry_count(struct hashtable *ht, int d)$/;"	f
all_tests	src/cache_tests/cache_tests.c	/^char *all_tests()$/;"	f
alloc_entry	src/cache.c	/^struct cache_entry *alloc_entry(char *path, char *content_type, void *content, int content_length)$/;"	f
arg	src/hashtable.c	/^	void *arg;$/;"	m	struct:foreach_callback_payload	file:
bucket	src/hashtable.h	/^    struct llist **bucket;$/;"	m	struct:hashtable	typeref:struct:hashtable::llist
cache	src/cache.h	/^struct cache {$/;"	s
cache_create	src/cache.c	/^struct cache *cache_create(int max_size, int hashsize)$/;"	f
cache_entry	src/cache.h	/^struct cache_entry {$/;"	s
cache_free	src/cache.c	/^void cache_free(struct cache *cache)$/;"	f
cache_get	src/cache.c	/^struct cache_entry *cache_get(struct cache *cache, char *path)$/;"	f
cache_put	src/cache.c	/^void cache_put(struct cache *cache, char *path, char *content_type, void *content, int content_length)$/;"	f
check	src/cache_tests/dbg.h	22;"	d
check_cache_entries	src/cache_tests/utils.h	/^int check_cache_entries(struct cache_entry *input, struct cache_entry *expected)$/;"	f
check_debug	src/cache_tests/dbg.h	28;"	d
check_mem	src/cache_tests/dbg.h	26;"	d
check_strings	src/cache_tests/utils.h	/^int check_strings(char *input, char *expected)$/;"	f
clean_errno	src/cache_tests/dbg.h	14;"	d
content	src/cache.h	/^    void *content;$/;"	m	struct:cache_entry
content_length	src/cache.h	/^    int content_length;$/;"	m	struct:cache_entry
content_type	src/cache.h	/^    char *content_type;$/;"	m	struct:cache_entry
count	src/llist.h	/^	int count;$/;"	m	struct:llist
cur_size	src/cache.h	/^    int cur_size; \/\/ Current number of entries$/;"	m	struct:cache
data	src/file.h	/^    void *data;$/;"	m	struct:file_data
data	src/hashtable.c	/^    void *data;$/;"	m	struct:htent	file:
data	src/llist.c	/^	void *data;$/;"	m	struct:llist_node	file:
debug	src/cache_tests/dbg.h	11;"	d
debug	src/cache_tests/dbg.h	9;"	d
default_hashf	src/hashtable.c	/^int default_hashf(void *data, int data_size, int bucket_count)$/;"	f
dllist_insert_head	src/cache.c	/^void dllist_insert_head(struct cache *cache, struct cache_entry *ce)$/;"	f
dllist_move_to_head	src/cache.c	/^void dllist_move_to_head(struct cache *cache, struct cache_entry *ce)$/;"	f
dllist_remove_tail	src/cache.c	/^struct cache_entry *dllist_remove_tail(struct cache *cache)$/;"	f
f	src/hashtable.c	/^	void (*f)(void *, void *);$/;"	m	struct:foreach_callback_payload	file:
file_data	src/file.h	/^struct file_data {$/;"	s
file_free	src/file.c	/^void file_free(struct file_data *filedata)$/;"	f
file_load	src/file.c	/^struct file_data *file_load(char *filename)$/;"	f
find_start_of_body	src/server.c	/^char *find_start_of_body(char *header)$/;"	f
foreach_callback	src/hashtable.c	/^void foreach_callback(void *vent, void *vpayload)$/;"	f
foreach_callback_payload	src/hashtable.c	/^struct foreach_callback_payload {$/;"	s	file:
free_entry	src/cache.c	/^void free_entry(struct cache_entry *entry)$/;"	f
get_d20	src/server.c	/^void get_d20(int fd)$/;"	f
get_file	src/server.c	/^void get_file(int fd, struct cache *cache, char *request_path)$/;"	f
get_in_addr	src/net.c	/^void *get_in_addr(struct sockaddr *sa)$/;"	f
get_listener_socket	src/net.c	/^int get_listener_socket(char *port)$/;"	f
handle_http_request	src/server.c	/^void handle_http_request(int fd, struct cache *cache)$/;"	f
hashed_key	src/hashtable.c	/^    int hashed_key;$/;"	m	struct:htent	file:
hashf	src/hashtable.h	/^    int (*hashf)(void *data, int data_size, int bucket_count);$/;"	m	struct:hashtable
hashtable	src/hashtable.h	/^struct hashtable {$/;"	s
hashtable_create	src/hashtable.c	/^struct hashtable *hashtable_create(int size, int (*hashf)(void *, int, int))$/;"	f
hashtable_delete	src/hashtable.c	/^void *hashtable_delete(struct hashtable *ht, char *key)$/;"	f
hashtable_delete_bin	src/hashtable.c	/^void *hashtable_delete_bin(struct hashtable *ht, void *key, int key_size)$/;"	f
hashtable_destroy	src/hashtable.c	/^void hashtable_destroy(struct hashtable *ht)$/;"	f
hashtable_foreach	src/hashtable.c	/^void hashtable_foreach(struct hashtable *ht, void (*f)(void *, void *), void *arg)$/;"	f
hashtable_get	src/hashtable.c	/^void *hashtable_get(struct hashtable *ht, char *key)$/;"	f
hashtable_get_bin	src/hashtable.c	/^void *hashtable_get_bin(struct hashtable *ht, void *key, int key_size)$/;"	f
hashtable_put	src/hashtable.c	/^void *hashtable_put(struct hashtable *ht, char *key, void *data)$/;"	f
hashtable_put_bin	src/hashtable.c	/^void *hashtable_put_bin(struct hashtable *ht, void *key, int key_size, void *data)$/;"	f
head	src/cache.h	/^    struct cache_entry *head, *tail; \/\/ Doubly-linked list$/;"	m	struct:cache	typeref:struct:cache::cache_entry
head	src/llist.h	/^	struct llist_node *head;$/;"	m	struct:llist	typeref:struct:llist::llist_node
htcmp	src/hashtable.c	/^int htcmp(void *a, void *b)$/;"	f
htent	src/hashtable.c	/^struct htent {$/;"	s	file:
htent_free	src/hashtable.c	/^void htent_free(void *htent, void *arg)$/;"	f
index	src/cache.h	/^    struct hashtable *index;$/;"	m	struct:cache	typeref:struct:cache::hashtable
key	src/hashtable.c	/^    void *key;$/;"	m	struct:htent	file:
key_size	src/hashtable.c	/^    int key_size;$/;"	m	struct:htent	file:
llist	src/llist.h	/^struct llist {$/;"	s
llist_append	src/llist.c	/^void *llist_append(struct llist *llist, void *data)$/;"	f
llist_array_free	src/llist.c	/^void llist_array_free(void **a)$/;"	f
llist_array_get	src/llist.c	/^void **llist_array_get(struct llist *llist)$/;"	f
llist_count	src/llist.c	/^int llist_count(struct llist *llist)$/;"	f
llist_create	src/llist.c	/^struct llist *llist_create(void)$/;"	f
llist_delete	src/llist.c	/^void *llist_delete(struct llist *llist, void *data, int (*cmpfn)(void *, void *))$/;"	f
llist_destroy	src/llist.c	/^void llist_destroy(struct llist *llist)$/;"	f
llist_find	src/llist.c	/^void *llist_find(struct llist *llist, void *data, int (*cmpfn)(void *, void *))$/;"	f
llist_foreach	src/llist.c	/^void llist_foreach(struct llist *llist, void (*f)(void *, void *), void *arg)$/;"	f
llist_head	src/llist.c	/^void *llist_head(struct llist *llist)$/;"	f
llist_insert	src/llist.c	/^void *llist_insert(struct llist *llist, void *data)$/;"	f
llist_node	src/llist.c	/^struct llist_node {$/;"	s	file:
llist_tail	src/llist.c	/^void *llist_tail(struct llist *llist)$/;"	f
load	src/hashtable.h	/^    float load; \/\/ Read-only$/;"	m	struct:hashtable
log_err	src/cache_tests/dbg.h	16;"	d
log_info	src/cache_tests/dbg.h	20;"	d
log_warn	src/cache_tests/dbg.h	18;"	d
main	src/server.c	/^int main(void)$/;"	f
max_size	src/cache.h	/^    int max_size; \/\/ Maxiumum number of entries$/;"	m	struct:cache
mime_type_get	src/mime.c	/^char *mime_type_get(char *filename)$/;"	f
mu_assert	src/cache_tests/minunit.h	11;"	d
mu_run_test	src/cache_tests/minunit.h	14;"	d
mu_suite_start	src/cache_tests/minunit.h	9;"	d
next	src/cache.h	/^    struct cache_entry *prev, *next; \/\/ Doubly-linked list$/;"	m	struct:cache_entry	typeref:struct:cache_entry::
next	src/llist.c	/^	struct llist_node *next;$/;"	m	struct:llist_node	typeref:struct:llist_node::llist_node	file:
num_entries	src/hashtable.h	/^    int num_entries; \/\/ Read-only$/;"	m	struct:hashtable
path	src/cache.h	/^    char *path;   \/\/ Endpoint path--key to the cache$/;"	m	struct:cache_entry
post_save	src/server.c	/^void post_save(int fd, char *save_path, char *save_content, int body_length) {$/;"	f
prev	src/cache.h	/^    struct cache_entry *prev, *next; \/\/ Doubly-linked list$/;"	m	struct:cache_entry	typeref:struct:cache_entry::cache_entry
resp_404	src/server.c	/^void resp_404(int fd)$/;"	f
send_response	src/server.c	/^int send_response(int fd, char *header, char *content_type, void *body, int content_length)$/;"	f
sentinel	src/cache_tests/dbg.h	24;"	d
size	src/file.h	/^    int size;$/;"	m	struct:file_data
size	src/hashtable.h	/^    int size; \/\/ Read-only$/;"	m	struct:hashtable
strlower	src/mime.c	/^char *strlower(char *s)$/;"	f
tail	src/cache.h	/^    struct cache_entry *head, *tail; \/\/ Doubly-linked list$/;"	m	struct:cache	typeref:struct:cache::
test_cache_alloc_entry	src/cache_tests/cache_tests.c	/^char *test_cache_alloc_entry()$/;"	f
test_cache_create	src/cache_tests/cache_tests.c	/^char *test_cache_create()$/;"	f
test_cache_get	src/cache_tests/cache_tests.c	/^char *test_cache_get()$/;"	f
test_cache_put	src/cache_tests/cache_tests.c	/^char *test_cache_put()$/;"	f
tests_run	src/cache_tests/minunit.h	/^int tests_run;$/;"	v
